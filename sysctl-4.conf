# Kernel sysctl configuration file for Red Hat Linux
#
# For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and
# sysctl.conf(5) for more details.

# Controls IP packet forwarding
net.ipv4.ip_forward = 0

# Controls source route verification
net.ipv4.conf.default.rp_filter = 1

# Do not accept source routing
net.ipv4.conf.default.accept_source_route = 0

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 1

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
kernel.core_uses_pid = 1

# Controls the use of TCP syncookies
net.ipv4.tcp_syncookies = 0

# Disable netfilter on bridges.
#net.bridge.bridge-nf-call-ip6tables = 0
#net.bridge.bridge-nf-call-iptables = 0
#net.bridge.bridge-nf-call-arptables = 0

# Controls the maximum size of a message, in bytes
kernel.msgmnb = 65536

# Controls the default maxmimum size of a mesage queue
kernel.msgmax = 65536

# Controls the maximum shared segment size, in bytes
kernel.shmmax = 68719476736

# Controls the maximum number of shared memory segments, in pages
kernel.shmall = 4294967296

##########################################################

# semsys: seminfo_semmns. Number of semaphore identifiers, system-wide
kernel.sem = 250 32100 100 128

# Kernel core pattern 
kernel.core_pattern = /cores/core.%e.%h.%t.%s.%p

# Minimal preemption granularity for CPU-bound tasks:
# (default: 1 msec#  (1 + ilog(ncpus)), units: nanoseconds)
kernel.sched_min_granularity_ns = 10000000

# SCHED_OTHER wake-up granularity.
# (default: 1 msec#  (1 + ilog(ncpus)), units: nanoseconds)
#
# This option delays the preemption effects of decoupled workloads
# and reduces their over-scheduling. Synchronous workloads will still
# have immediate wakeup/sleep latencies.
kernel.sched_wakeup_granularity_ns = 15000000

# Kernel swappines (AWS allocates no swap space)
#
# Filesystem I/O is usually much more efficient than swapping, so try to keep
# swapping low.  It's usually safe to go even lower than this on systems with
# server-grade storage. default = 60. 30.
vm.swappiness = 0

# Some minimal amount of memory is needed to satisfy PF_MEMALLOC
# allocations; if you set this to lower than 1024KB, your system will
# become subtly broken, and prone to deadlock under high loads.
vm.min_free_kbytes = 65536

# % of total system memory for a process to write dirty buffers
#
# If a workload mostly uses anonymous memory and it hits this limit, the entire
# working set is buffered for I/O, and any more write buffering would require
# swapping, so it's time to throttle writes until I/O can catch up.  Workloads
# that mostly use file mappings may be able to use even higher values.
#
# The generator of dirty data starts writeback at this percentage (system default
# is 20% 40)
vm.dirty_ratio = 10

# % of memory dirty for pdflush to write dirty data 
#
# Start background writeback (via writeback threads) at this percentage (system
# default is 10% 15)
vm.dirty_background_ratio = 5

# Increase number of pages kernel reads in at once
vm.page-cluster = 5

# In hundredths of a second, how often the pdflush
# threads should wake up to write data back out to disk.
vm.dirty_writeback_centisecs = 1500

# Kernel panic timeout
kernel.panic = 30

### Increase TCP window size  ###

# Increase /proc/sys/net/core/rmem_default from 129024
net.core.rmem_default = 258048

# Increase /proc/sys/net/core/wmem_default from 129024
net.core.wmem_default = 258048

# Increase /proc/sys/net/core/rmem_max from 131071
net.core.rmem_max = 16777216 

# Increase /proc/sys/net/core/wmem_max from 131071
net.core.wmem_max = 16777216 

# Increase /proc/sys/net/ipv4/tcp_rmem max 
net.ipv4.tcp_rmem = 4096 87380 16777216 

# Increase /proc/sys/net/ipv4/tcp_wmem max
net.ipv4.tcp_wmem = 4096 65536 16777216 

# Reenable dynamic optimization of TCP receive window
net.ipv4.tcp_no_metrics_save = 1

# Enable TCP Window Scaling (default)
net.ipv4.tcp_window_scaling = 1
 
### End TCP Window Size ###

# recommended to increase this for 1000 BT or higher
net.core.netdev_max_backlog = 2500
# for 10 GigE, use this
# net.core.netdev_max_backlog = 30000

# Increase syn_backlog
net.ipv4.tcp_max_syn_backlog = 4096

# Set TCP timeout to 15 minutes
net.ipv4.tcp_keepalive_time = 900

# Increase local port range
net.ipv4.ip_local_port_range = 10000 65500

# don't cache ssthresh from previous connection
net.ipv4.tcp_moderate_rcvbuf = 1

# Improve TCP overhead
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_dsack = 1
net.ipv4.tcp_fack = 1

## Start Disable Redirects and Source Routing

# Disable source routing, although default setting is already set in stock file
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.eth0.accept_source_route = 0
net.ipv4.conf.lo.accept_source_route = 0

# Confirm our desire stop redirects (default already)
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.eth0.send_redirects = 0
net.ipv4.conf.lo.send_redirects = 0

# Source route verification on - incoming packets must match outgoing routing
net.ipv4.conf.all.rp_filter = 1

## End disable sending redirects
